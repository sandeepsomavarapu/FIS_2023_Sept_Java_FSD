


Language:-
===========

		communication human
 english-->26

Programming Language:
======================== 
		communication with machine
		
		program/instructions--->PL
		
java,c++,python,.net,c
Functions						objects
	POP							OOP
B,C,BCPL,COBOL,PHOTON..		java,c++,python,.net

			1)PERFORMANCE	INHERITANCE,POLYMORPHISAM
			2)SECURITY		ABSTRACTION,ENCAPSULATION
	
			OOPS FEATURES
	
			PYTHON IS OOPL	-->PI
	
	why python		1993	1.x
							3.x
	guido van russam
	
	1)simple
	
	
	
		welcome to java
	53 	
	Welcome.java
	
	class Welcome
	{
	public static void main(String args[])
	{
	System.out.println("welcome to java");
	}
	}
	
	33 keywords
	
	
	1)functional programming features C
	2) OOP features  c++
	3) scripting language features from perl,shell script
	4)modula programming from modula-3
	
	
		the complete monty python circus

		
		Applications
		
		1)dekstop/standalone ex:notepadd++,antivirus,media players,...etc corepython,tkinter
		2)web applications	 ex:gmail,fb,insta,amazon....URL    django,flask
		3)db applications     pdbc
		4)network programming
		5)gaming
		6)Data scince
		7)IOT
		8)AI
		9)ML
		
		we can't develop mobile applications
		
	Features	
		1)simple
		2)open source  & free source 	ex: jython,cpython,rubypython,ironpython
		
Identifiers:
============		
		python dynamic typed programming language
		
		
		int a=123;//java static typed PL
		
			b=234; //dynamic typed PL
			
		
		a-z
		A-z
		0-9
		_
		
	 import keyword
>>> keyword.kwlist
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 
'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 
'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal',
 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']	
		
		
		
Datatypes:
==========
	 varname=vlaue;
	
	int
	float
	complex
	bool
	str
	range
	
	list
	set
	tuple
	frozenset
	dict
	None
		
		
		
	type()
	id()
	print()
		
	int()
	float()
	str()
	bool()
	complex()	
		
		a=123
		a=234
		print(a)//234
		
list
tuple
set
frozenset
dict		
				array-->homogeneous,fixed in size
LIST:
=====slicing
group of values as single entity
 where the insertion order is preserved and duplicates are allowed 

	1)insertion order is preserved 
	2)duplicates are allowed
	3)both homogeneous and haterogeneous data is allowed
	4)growable in nature or not fixed in size
	5)[] square brackets
	6)list muttable

muttable/imuttable

TUPLE:
=======
group of values as single entity
 where the insertion order is preserved and duplicates are allowed 

	1)insertion order is preserved 
	2)duplicates are allowed
	3)both homogeneous and haterogeneous data is allowed
	4)() parentheses
	5)tuple imuttable

SET:
====
group of values as single entity
 where the insertion order is not preserved and duplicates are not allowed 

	1)insertion order is not preserved 
	2)duplicates are not allowed
	3)both homogeneous and haterogeneous data is allowed
	4)growable in nature or not fixed in size
	5){}
	6)set muttable


FrozenSET:
==========
group of values as single entity
 where the insertion order is not preserved and duplicates are not allowed 

	1)insertion order is not preserved 
	2)duplicates are not allowed
	3)both homogeneous and haterogeneous data is allowed
	4)growable in nature or not fixed in size
	5)frozenset({})
	6)frozenset imuttable
	
Dict:
=====
key,value

	1)key ,value can be any data type and both homogeneous , haterogeneous
	2)key must be unique,value can be duplicate
	3){}
	4)dict is muttable
	
	
C:\Users\SANDEEP>py
Python 3.11.0 (main, Oct 24 2022, 18:26:48) [MSC v.1933 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> contact=99999999
>>> print(contact)
99999999
>>> type(contact)
<class 'int'>
>>> emps=['suresh','mahesh','naresh','rajesh','suresh']
>>> print(emps)
['suresh', 'mahesh', 'naresh', 'rajesh', 'suresh']
>>> type(emps)
<class 'list'>
>>> emps.append(1234)
>>> type(emps)
<class 'list'>
>>> print(emps)
['suresh', 'mahesh', 'naresh', 'rajesh', 'suresh', 1234]
>>> emps.remove('suresh')
>>> print(emps)
['mahesh', 'naresh', 'rajesh', 'suresh', 1234]
>>> print(emps)
['mahesh', 'naresh', 'rajesh', 'suresh', 1234]
>>> print(emps[1:3])
['naresh', 'rajesh']
>>> print(emps[1:5])
['naresh', 'rajesh', 'suresh', 1234]
>>> print(emps[1])
naresh
>>> print(emps[0])
mahesh
>>> print(emps[-1])
1234
>>> print(emps[-1:-4])
[]
>>> print(emps[-1:])
[1234]
>>> print(emps[-1:3])
[]
>>> print(emps[-2])
suresh
>>> print(emps[-3])
rajesh
>>> print(emps[-4:-1])
['naresh', 'rajesh', 'suresh']
>>> t=(12,True,'mahesh','naresh','mahesh',False)
>>> type(t)
<class 'tuple'>
>>> t.append('few are sleeping')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'append'
>>> print(t)
(12, True, 'mahesh', 'naresh', 'mahesh', False)
>>> names={'mahesh','rajesh','naresh','mahesh'}
>>> type(names)
<class 'set'>
>>> print(names)
{'rajesh', 'mahesh', 'naresh'}
>>> names.add('feeling sleepy')
>>> print(names)
{'rajesh', 'mahesh', 'feeling sleepy', 'naresh'}
>>> names.add(111)
>>> print(names)
{'mahesh', 111, 'rajesh', 'feeling sleepy', 'naresh'}
>>> names.remove('mahesh')
>>> print(names)
{111, 'rajesh', 'feeling sleepy', 'naresh'}
>>> names1={'mahesh','rajesh','naresh','mahesh'}
>>> type(names1)
<class 'set'>
>>> names2=frozenset(names1)
>>> names1.add('fis')
>>> print(names1)
{'fis', 'rajesh', 'mahesh', 'naresh'}
>>> names2.add('fis')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'frozenset' object has no attribute 'add'
>>> type(names2)
<class 'frozenset'>
>>> students={111:'mahesh',222:'rajesh',333:'suresh','222','lenovo'}
  File "<stdin>", line 1
    students={111:'mahesh',222:'rajesh',333:'suresh','222','lenovo'}
                                                         ^
SyntaxError: ':' expected after dictionary key
>>> students={111:'mahesh',222:'rajesh',333:'suresh','222':'lenovo'}
>>> type(students)
<class 'dict'>
>>> print(students)
{111: 'mahesh', 222: 'rajesh', 333: 'suresh', '222': 'lenovo'}
>>> students1={111:'mahesh',222:'rajesh',333:'suresh',222:'lenovo'}
>>> print(students1)
{111: 'mahesh', 222: 'lenovo', 333: 'suresh'}
>>> students1[555]='dell'
>>> print(students1)
{111: 'mahesh', 222: 'lenovo', 333: 'suresh', 555: 'dell'}
>>>	



input():dynamic 



You're trying to use k (which is a list) as a key for d. 
Lists are mutable and can't be used as dict keys


.java
python 

	.py


flow control statement

if,else,elif,for,while


Functions:
============

		


		a =12;
		b=13;
	result=a+b


		a1=100;
		b1=200;
	result1=a1+b1;	


def addOfTwo(a,b):
	result=a+b


	addOfTwo(12,13)
	addOfTwo(100,200)

Task1:
=======
function and input 

username 
password 



	uname  fisglobal
	pass   fis@123


		login success
		
	enter valid credetials


OOPS:
=====
	class:collection of data members and member functions  class 
	object :an instance of class 

		obj=Employee()

instance and static





local variables
global variables ---> instance and static 



instance variable:
====================

class Employee:
	empId=123;
	orgName="fis global"		static

	emp1=Employee(111);
	emp2=Employee(112);

where we can instance variable
	1)inside the constructor by using self
	2)inside the instance  by using self
	3)outside the class by using obj reference 

Static Variables(class variables):
=================
	not varied from object to object 
	outside the method and with in the class 

1)inside constructor by using classname 
2)inside instance method  by using classname 
3)classname 


methods:

instance methods :self  objref
class methods	:cls 	@classmethod
static methods	:@staticmethod




functions/methods

exception handling









